{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/utils/validators/validators.js","components/common/FormControls/FormControls.jsx","components/hoc/withAuthRedirect.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusUseHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","required","value","maxLength","max","values","length","minLength","min","TextArea","input","meta","touched","error","props","noValidate","className","styles","formControl","Input","createField","component","validators","name","placeholder","text","validate","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","to","Post","s","item","src","message","likesCount","maxLength50","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","React","memo","postsElements","posts","map","post","key","postsBlock","addPost","newPostText","MyPostsContainer","profilePage","dispatch","newPost","addPostActionCreator","MyPosts","ProfileStatusUseHooks","useState","editMote","setEditMode","status","setStatus","useEffect","type","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onClick","ProfileInfo","profile","isOwner","savePhoto","profileInfo","alt","descriptionBlock","profilePhoto","photos","large","userIcon","target","files","aboutMe","fullName","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","Profile","ProfileContainer","userId","this","match","params","authUserId","history","push","getUserProfile","getStatus","updateProfile","prevProps","prevState","snapshot","mapDispatchToProps","compose","withRouter"],"mappings":"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","file":"static/js/4.74417e72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__nsJxe\",\"error\":\"FormControls_error__1etId\",\"formSomeError\":\"FormControls_formSomeError__3FfET\"};","export const required = (value) => {\n  if (value) {\n    return undefined;\n  }\n  return \"Required\";\n};\n\nexport const maxLength = (max) => (values) => {\n  if (values && values.length > max) {\n    return `Max simbols is ${max}`;\n  }\n  return undefined;\n};\nexport const minLength = (min) => (values) => {\n  if (values && values.length < min) {\n    return `Min simbols is ${min}`;\n  }\n  return undefined;\n};\n","import React from \"react\";\nimport styles from \"./FormControls.module.css\";\nimport { Field } from \"redux-form\";\n\nexport const TextArea = ({ input, meta: { touched, error }, ...props }) => {\n  const noValidate = touched && error;\n  return (\n    <div\n      className={styles.formControl + \" \" + (noValidate ? styles.error : \"\")}\n    >\n      <div>\n        <textarea {...input} {...props}></textarea>\n      </div>\n      <div>{noValidate && <span>{error}</span>}</div>\n    </div>\n  );\n};\n\nexport const Input = ({ input, meta: { touched, error }, ...props }) => {\n  const noValidate = touched && error;\n  return (\n    <div\n      className={styles.formControl + \" \" + (noValidate ? styles.error : \"\")}\n    >\n      <div>\n        <input {...input} {...props} />\n      </div>\n      <div>{noValidate && <span>{error}</span>}</div>\n    </div>\n  );\n};\n\nexport const createField = (\n  component,\n  validators,\n  name,\n  placeholder,\n  props = {},\n  text = \"\"\n) => (\n  <div>\n    <Field\n      component={component}\n      validate={validators}\n      name={name}\n      placeholder={placeholder}\n      {...props}\n    />\n    {text}\n  </div>\n);\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\n// export const WithAuthRedirect = (Component) => {\n//   class WithAuthRedirect extends React.Component {\n//     render() {\n//       if (!this.props.isAuth) {\n//         return <Redirect to={\"/login\"} />;\n//       }\n//       return <Component {...this.props} />;\n//     }\n//   }\n//   let ConnectedWithAuthRedirect = connect(mapStateToProps)(WithAuthRedirect);\n//   return ConnectedWithAuthRedirect;\n// };\nexport const WithAuthRedirect = (Component) => {\n  let withRedirectAuth = (props) => {\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\n    return <Component {...props} />;\n  };\n\n  let ConnectedWithAuthRedirect = connect(mapStateToProps)(withRedirectAuth);\n  return ConnectedWithAuthRedirect;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2YMTB\",\"posts\":\"MyPosts_posts__2ed1J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3cfKW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__rjzof\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__28rWm\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1ZnLt\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://i.insider.com/5eb47f80fc593d23461aa232?width=1100&format=jpeg&auto=webp\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { maxLength, required } from \"../../../utils/validators/validators\";\nimport { TextArea } from \"../../../common/FormControls/FormControls\";\n\nconst maxLength50 = maxLength(50);\n\nconst AddNewPostForm = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          <Field\n            component={TextArea}\n            validate={[required, maxLength50]}\n            placeholder=\"Enter your post\"\n            name={\"newPostText\"}\n          />\n        </div>\n        <button>Add post</button>\n      </form>\n    </div>\n  );\n};\n\nexport const AddNewPostReduxForm = reduxForm({\n  form: \"profileAddPost\",\n})(AddNewPostForm);\n","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport { AddNewPostReduxForm } from \"./AddNewPostForm/AddNewPostForm\";\n\nconst MyPosts = (props) => {\n  let postsElements = props.posts.map((post) => (\n    <Post\n      key={post.message}\n      message={post.message}\n      likesCount={post.likesCount}\n    />\n  ));\n\n  const onAddPost = (value) => {\n    props.addPost(value.newPostText);\n  };\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My post</h3>\n      <AddNewPostReduxForm onSubmit={onAddPost} />\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  );\n};\nexport default React.memo(MyPosts);\n","import { addPostActionCreator } from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPost) => {\n      dispatch(addPostActionCreator(newPost));\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useEffect, useState } from \"react\";\n\nconst ProfileStatusUseHooks = (props) => {\n  const [editMote, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activatedEditMode = () => {\n    setEditMode(true);\n  };\n  const deActivatedEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <>\n      <div>\n        {!editMote ? (\n          <span onClick={activatedEditMode}>{status}</span>\n        ) : (\n          <input\n            type=\"text\"\n            onChange={onStatusChange}\n            value={status}\n            autoFocus={true}\n            onBlur={deActivatedEditMode}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ProfileStatusUseHooks;\n","import React from \"react\";\n\nimport styles from \"./ProfileInfo.module.css\";\nimport { Spinner } from \"../../common/spinner/spinner\";\nimport ProfileStatusUseHooks from \"./ProfileStatusUseHooks\";\nimport userIcon from \"../../../assets/image/user.png\";\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\n  if (!profile) {\n    return <Spinner />;\n  }\n\n  const onPhotosChange = (e) => {\n    if (e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n  return (\n    <div>\n      <div className={styles.profileInfo}>\n        <img src=\"https://theinpaint.com/images/example-1-2.jpg\" alt=\"cover\" />\n      </div>\n      <div className={styles.descriptionBlock}>\n        <div className={styles.profilePhoto}>\n          <img src={profile.photos.large || userIcon} alt=\"cover\" />\n          {isOwner && <input onChange={onPhotosChange} type={\"file\"} />}\n        </div>\n\n        <ProfileStatusUseHooks status={status} updateStatus={updateStatus} />\n\n        <div>{profile.aboutMe}</div>\n        <div>{profile.fullName}</div>\n        <div>\n          <strong>Contacts: </strong>\n          <div>{profile.contacts.facebook}</div>\n          <div>{profile.contacts.github}</div>\n          <div>{profile.contacts.instagram}</div>\n          <div>{profile.contacts.mainLink}</div>\n          <div>{profile.contacts.twitter}</div>\n          <div>{profile.contacts.vk}</div>\n          <div>{profile.contacts.website}</div>\n          <div>{profile.contacts.youtube}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ProfileInfo;\n","import React from \"react\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport styles from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo\n        isOwner={props.isOwner}\n        savePhoto={props.savePhoto}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getStatus,\n  getUserProfile,\n  savePhoto,\n  updateStatus,\n} from \"../../redux/profileReducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { WithAuthRedirect } from \"../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  updateProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authUserId;\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.updateProfile();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.updateProfile();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Profile\n          {...this.props}\n          isOwner={!this.props.match.params.userId}\n          profile={this.props.profile}\n          status={this.props.status}\n          updateStatus={this.props.updateStatus}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authUserId: state.auth.userId,\n  };\n};\nconst mapDispatchToProps = {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n};\n\nexport default compose(\n  WithAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps),\n  withRouter\n)(ProfileContainer);\n"],"sourceRoot":""}